@page "/registerdevice"
@using HeliumHealthMonitor.BusinessLogic.Authentication
@using HeliumHealthMonitor.Data.Shared.Models
@inject HttpClient Http
@inject IConfiguration _config 
@inject IAuthorisation _authorisation;
@inject IUserSessionInfo _userSessionInfo
@inject NavigationManager _navManager;

<h3>RegisterDevice</h3>
<p>@message</p>
<EditForm Model="reg" OnValidSubmit="OnValid" style="max-width:500px">
    <DataAnnotationsValidator/>
    <div class="mb-2">
        <InputText class="form-control" @bind-Value="reg.Username" placeholder="Macadresse"></InputText>
    </div>
    <div class="mb-2">
        <InputText type="password" class="form-control" @bind-Value="reg.Password" placeholder="Passwort"></InputText>
    </div>
    <div class="mb-2">
        <InputText type="password" class="form-control" @bind-Value="reg.Password2" placeholder="Passwort wiederholen"></InputText>
    </div>
    <div class="mb-2 text-right">
        <button class="btn btn-secondary" disabled="@isDisabled">register</button>
    </div>
</EditForm>

@code {
    DeviceRegistrationFormModel reg = new DeviceRegistrationFormModel();
    string message = string.Empty;
    string login = string.Empty;
    bool isDisabled = false;
    bool isAuthorized;

     protected override async Task OnInitializedAsync()
    {

        isAuthorized = _authorisation.IsUserOrAdmin(_userSessionInfo);

        if(!isAuthorized){ _navManager.NavigateTo("/"); }
        
        await base.OnInitializedAsync();
    }

    private async Task OnValid()
    {
        isDisabled = true;

        using (var msg = await Http.PostAsJsonAsync<DeviceRegistrationFormModel>($"{_config["ApiBaseAddress"]}/api/devicelogin/register", reg,
            System.Threading.CancellationToken.None))
        {
            if (msg.IsSuccessStatusCode)
            {
                UserLoginResult result = await msg.Content.ReadFromJsonAsync<UserLoginResult>();
                message = result.Message;
                if (result.Success)
                {
                    message = "Gerät registriert";
                }
                else
                {
                    message = "Gerät nicht registriert";
                    isDisabled = false;
                }
            }
        }
    }
}
