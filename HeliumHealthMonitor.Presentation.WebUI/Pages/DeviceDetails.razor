@page "/device-details/{Id}"

<PageTitle>Details</PageTitle>

@using HeliumHealthMonitor.Data.MongoDBLayer.DataAccess
@using HeliumHealthMonitor.Data.Shared.Models
@using HeliumHealthMonitor.BusinessLogic.Authentication
@inject IDeviceDataAccess _deviceDataAccess;
@inject IEnergyStatusDataAccess _energyStatusDataAccess;
@inject IAuthorisation _authorisation;
@inject IUserSessionInfo _userSessionInfo
@inject NavigationManager _navManager;

<h3>Details</h3>

@if(device == null || !(Series?.Count > 0))
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <ul>
        <li>@($"Miner Name:     {device.HeliumName}")</li>
        <li>@($"Mac-Address:    {device.Macaddress}")</li>
        <li>@($"Standort:       {device.Location}")</li>
        <li>@($"Spannung:       {device.Voltage} V")</li>
        <li>@($"Ladestand:      {device.VoltagePercent} %")</li>
        <li>@($"Registriert am: {device.RegisterDate}")</li>
        <li>@($"Letzte Meldung: {device.LastLifeSignal}")</li>
        <li>@($"Letzer Start:   {device.LastBootup}")</li>
        <li>@($"Letzer Shutdown:{device.LastShutDown}")</li>
        <li>@($"Letzte Messung: {device.MeasureTime}")</li>
    </ul>
    <div>
        <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    bool isAuthorized;
    DeviceModel device;
    List<EnergyStatusModel> energyStatus;
    List<ChartSeries> Series;
    private ChartOptions options = new ChartOptions();

    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };


    protected override async Task OnInitializedAsync()
    {
        isAuthorized = _authorisation.IsUserOrAdmin(_userSessionInfo);

        if(!isAuthorized){ _navManager.NavigateTo("/"); }

        device = await _deviceDataAccess.Get(Id);

        energyStatus = await _energyStatusDataAccess.GetAllFromDevice(Id);

        var data = new double[energyStatus.Count];
        for(var i = 0; i < energyStatus.Count; i++)
        {
            data[i] = energyStatus[i].Voltage;
        }
        Series = new List<ChartSeries>() { new ChartSeries() { Name = device.HeliumName, Data = data } };

        options.InterpolationOption = InterpolationOption.NaturalSpline;
        //options.YAxisFormat = "V";

        await base.OnInitializedAsync();
    }
}
