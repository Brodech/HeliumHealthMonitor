@page "/device-details/{Id}"

<PageTitle>Details</PageTitle>

@using HeliumHealthMonitor.Data.MongoDBLayer.DataAccess
@using HeliumHealthMonitor.Data.Shared.Models
@using HeliumHealthMonitor.BusinessLogic.Authentication
@inject IDeviceDataAccess _deviceDataAccess;
@inject IEnergyStatusDataAccess _energyStatusDataAccess;
@inject IAuthorisation _authorisation;
@inject IUserSessionInfo _userSessionInfo
@inject NavigationManager _navManager;

<PageTitle>Details</PageTitle>

<MudGrid>
    <MudItem xs="4">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudText>Details</MudText>
        </MudPaper>
        <MudPaper Width="100%">
            @if (device == null)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
            else
            {
                <MudList Clickable="true">
                    <MudListItem Text=@($"Miner Name:     {device.HeliumName}") Icon="@Icons.Filled.SpeakerNotes" />
                    <MudListItem Text=@($"Spannung:       {device.Voltage} V") Icon="@Icons.Filled.BatteryChargingFull" />
                    <MudListItem Text=@($"Letzte Meldung: {device.LastLifeSignal}") Icon="@Icons.Filled.WatchLater" />
                    <MudDivider />
                    <MudListItem Text=@($"Mac-Address:    {device.Macaddress}") Icon="@Icons.Material.Filled.Inbox" />
                   <MudListItem Text=@($"Standort:       {device.Location}") Icon="@Icons.Material.Filled.Inbox" />
                    <MudListItem Text=@($"Ladestand:      {device.VoltagePercent} %") Icon="@Icons.Filled.BatteryChargingFull" />
                   <MudListItem Text=@($"Registriert am: {device.RegisterDate}") Icon="@Icons.Filled.WatchLater" />
                    <MudListItem Text=@($"Letzer Start:   {device.LastBootup}") Icon="@Icons.Filled.WatchLater" />
                   <MudListItem Text=@($"Letzer Shutdown:{device.LastShutDown}") Icon="@Icons.Filled.WatchLater" />
                   <MudListItem Text=@($"Letzte Messung: {device.MeasureTime}") Icon="@Icons.Filled.WatchLater" />
                </MudList>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="8">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudGrid>
                <MudItem  xs="12">
                     <MudText Class="d-flex align-center justify-center mud-width-full py-8">Voltage</MudText>
                </MudItem>
                <MudItem  xs="12">
                    @if (!(Series?.Count > 0))
                    {
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                    }
                    else
                    {
                        <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
                        <MudMenu Label="Interpolation Algorithm" FullWidth="true">
                            <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.Straight)">Straight</MudMenuItem>
                            <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.NaturalSpline)">Natural Spline</MudMenuItem>
                        </MudMenu>
                    }
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudGrid>
                <MudItem  xs="12">
                     <MudText Class="d-flex align-center justify-center mud-width-full py-8">Actions</MudText>
                </MudItem>
                <MudItem  xs="12">
                     <MudButton Variant="Variant.Filled" OnClick=@OnClickBack>Back</MudButton>
                     <MudButton Variant="Variant.Filled" OnClick=@OnClickLogout>Logout</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public string Id { get; set; }
    bool isAuthorized;
    DeviceModel device;
    List<EnergyStatusModel> energyStatus;
    List<ChartSeries> Series;
    private ChartOptions options = new ChartOptions();

    private string[] XAxisLabels;

    protected override async Task OnInitializedAsync()
    {
        isAuthorized = _authorisation.IsUserOrAdmin(_userSessionInfo);

        if(!isAuthorized){ _navManager.NavigateTo("/"); }

        device = await _deviceDataAccess.Get(Id);

        energyStatus = await _energyStatusDataAccess.GetAllFromDevice(Id);

        var data = new double[energyStatus.Count];
        XAxisLabels = new string[energyStatus.Count];
        for(var i = 0; i < energyStatus.Count; i++)
        {
            data[i] = energyStatus[i].Voltage;
            XAxisLabels[i] = energyStatus[i].MeasureTime.ToLocalTime().ToString("HH:mm");
        }
        Series = new List<ChartSeries>() { new ChartSeries() { Name = device.HeliumName, Data = data } };

        options.InterpolationOption = InterpolationOption.NaturalSpline;
        //options.YAxisFormat = "V";

        await base.OnInitializedAsync();
    }

    private void OnClickBack()
    {
        _navManager.NavigateTo($"/dashboard");
    }

    private void OnClickLogout()
    {
        _navManager.NavigateTo($"/logout");
    }

    void OnClickMenu(InterpolationOption interpolationOption)
    {
        options.InterpolationOption = interpolationOption;
        StateHasChanged();
    }
}
