@page "/device-details/{Id}"

<PageTitle>Details</PageTitle>

@using HeliumHealthMonitor.Data.MongoDBLayer.DataAccess
@using HeliumHealthMonitor.Data.Shared.Models
@using HeliumHealthMonitor.BusinessLogic.Authentication
@inject IDeviceDataAccess _deviceDataAccess;
@inject IEnergyStatusDataAccess _energyStatusDataAccess;
@inject IAuthorisation _authorisation;
@inject IUserSessionInfo _userSessionInfo
@inject NavigationManager _navManager;

<PageTitle>Details</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudText>Details</MudText>
        </MudPaper>
        <MudPaper Width="100%">
            @if (device == null)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
            else
            {
                <MudGrid>
                    <MudItem xs="6">
                        <MudList>
                            <MudListItem Text=@($"Miner Name:     {device.HeliumName}") Icon="@Icons.Filled.SpeakerNotes" />
                            <MudListItem Text=@($"Mac-Adresse:    {device.Macaddress}") Icon="@Icons.Material.Filled.Inbox" />
                            <MudListItem Text=@($"Letzte Meldung: {device.LastLifeSignal.ToLocalTime()}") Icon="@Icons.Filled.WatchLater" />
                        </MudList>
                    </MudItem>
                    <MudItem xs="6">
                        <MudList>
                            <MudListItem Text=@($"Spannung:       {device.Voltage} V") Icon="@Icons.Filled.BatteryChargingFull" />
                            <MudListItem Text=@($"Ladestand:      {device.VoltagePercent} %") Icon="@Icons.Filled.BatteryChargingFull" />
                           <MudListItem Text=@($"Letzte Messung: {device.MeasureTime.ToLocalTime()}") Icon="@Icons.Filled.WatchLater" />
                        </MudList>
                    </MudItem>
                </MudGrid>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudGrid>
                <MudItem  xs="12">
                     <MudText Class="d-flex align-center justify-center mud-width-full py-8">Ladestand</MudText>
                </MudItem>
                <MudItem  xs="12">
                    @if (!(Series?.Count > 0))
                    {
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                    }
                    else
                    {
                        <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" ChartOptions="options" Class="m-2"></MudChart>
                        <MudMenu Label="Interpolations Algorithmus" FullWidth="true">
                            <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.Straight)">keine Inerpolation</MudMenuItem>
                            <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.NaturalSpline)">Natural Spline</MudMenuItem>
                        </MudMenu>
                        <MudSlider @bind-Value="zoomHours" Min="6" Max="336" Step="1" Color="Color.Info" onchange=@RefreshData>Zoom: @($"{Math.Round(zoomHours/24, 2).ToString()} Tag/e")</MudSlider>
                        <MudSlider @bind-Value="slideHours" Min="0" Max="330" Step="1" Color="Color.Error" onchange=@RefreshData>Zeitachse: @($"{slideHours.ToString()} Sunden zurück")</MudSlider>
                    }
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudGrid>
                <MudItem  xs="12">
                     <MudText Class="d-flex align-center justify-center mud-width-full py-8">Actions</MudText>
                </MudItem>
                <MudItem  xs="12">
                     <MudButton Variant="Variant.Filled" OnClick=@OnClickBack>Back</MudButton>
                     <MudButton Variant="Variant.Filled" OnClick=@OnClickLogout>Logout</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public string Id { get; set; }
    bool isAuthorized;
    DeviceModel device;
    private List<EnergyStatusModel> energyStatus;
    private List<ChartSeries> Series;
    private ChartOptions options = new ChartOptions();

    private string[] XAxisLabels;
    private double zoomHours = 24;
    private double slideHours = 0;
    protected override async Task OnInitializedAsync()
    {
        isAuthorized = _authorisation.IsUserOrAdmin(_userSessionInfo);

        if(!isAuthorized){ _navManager.NavigateTo("/"); }

        device = await _deviceDataAccess.Get(Id);

        energyStatus = await _energyStatusDataAccess.GetTimeSpan(DateTime.UtcNow.AddHours(-zoomHours) ,DateTime.UtcNow);

        Series = GetSeries(energyStatus);

        options.InterpolationOption = InterpolationOption.NaturalSpline;
        //options.YAxisFormat = "V";

        await base.OnInitializedAsync();
    }

    private List<ChartSeries> GetSeries(List<EnergyStatusModel> energyStatus)
    {
        var data = new double[energyStatus.Count];
        XAxisLabels = getXlabels(energyStatus);
        for(var i = 0; i < energyStatus.Count; i++)
        {
            data[i] = energyStatus[i].Voltage;
        }
        Series = new List<ChartSeries>() { new ChartSeries() { Name = device.HeliumName, Data = data } };
        return Series;
    }

    private string[] getXlabels(List<EnergyStatusModel> energieStatus)
    {
        var maxLabels = 12;
        var jumps = energyStatus.Count / maxLabels;
        string[] Xlabels = new string[energyStatus.Count];

        for(var i = 0; i < energyStatus.Count; i++)
        {
            if((i % jumps) == 0)
            {
                Xlabels[i] = energyStatus[i].MeasureTime.ToLocalTime().ToString("HH:mm");
            }
            else
            {
                Xlabels[i] = "";
            }
        }

        return Xlabels;
    }

    private void OnClickBack()
    {
        _navManager.NavigateTo($"/dashboard");
    }

    private void OnClickLogout()
    {
        _navManager.NavigateTo($"/logout");
    }

    void OnClickMenu(InterpolationOption interpolationOption)
    {
        options.InterpolationOption = interpolationOption;
        StateHasChanged();
    }
    private async Task RefreshData()
    {
        if (slideHours != 0)
        {
            energyStatus = await _energyStatusDataAccess.GetTimeSpan(DateTime.UtcNow.AddHours(-zoomHours).AddHours(-slideHours) ,DateTime.UtcNow.AddHours(-slideHours));
        }
        else
        {
            energyStatus = await _energyStatusDataAccess.GetTimeSpan(DateTime.UtcNow.AddHours(-zoomHours) ,DateTime.UtcNow);
        }
        Series = GetSeries(energyStatus);
        StateHasChanged();
    }

}
