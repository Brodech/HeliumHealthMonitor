@page "/login"

@using System.ComponentModel.DataAnnotations
@using HeliumHealthMonitor.BusinessLogic.Authentication
@using HeliumHealthMonitor.Data.Shared.Models
@using Microsoft.IdentityModel.Tokens
@using System.Text
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
@inject IAuthentication _authentication
@inject IConfiguration _config

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="12">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Benutzername"
                              @bind-Value="model.Username" For="@(() => model.Username)"/>
                <MudTextField Label="Passwort" Class="mt-3"
                              @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Authenticate">Login</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>
</EditForm>

@code {
    UserLoginFormModel model = new UserLoginFormModel();
    bool IsValid;

    private void OnValidSubmit(EditContext context)
    {
        IsValid = true;
        StateHasChanged();
    }
    private async void Authenticate()
    {
        if (IsValid)
        {
            try
            {
                var user = await _authentication.AuthenticateUser(model);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}
